"""workflows

Revision ID: 855d8af803d2
Revises: 9d9b45b8a789
Create Date: 2025-06-19 23:43:21.510596

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '855d8af803d2'
down_revision: Union[str, None] = '9d9b45b8a789'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ai_tools',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('tool_type', sa.String(length=100), nullable=False),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('schema_definition', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ai_tools_name'), 'ai_tools', ['name'], unique=True)
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('execution_checkpoints',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('execution_id', sa.UUID(), nullable=False),
    sa.Column('checkpoint_id', sa.String(length=255), nullable=False),
    sa.Column('state_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('checkpoint_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['execution_id'], ['workflow_executions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_execution_checkpoints_checkpoint_id'), 'execution_checkpoints', ['checkpoint_id'], unique=False)
    op.add_column('workflow_executions', sa.Column('error_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('workflow_executions', sa.Column('current_step', sa.String(length=255), nullable=True))
    op.add_column('workflow_executions', sa.Column('steps_completed', sa.Integer(), nullable=False))
    op.add_column('workflow_executions', sa.Column('total_steps', sa.Integer(), nullable=True))
    op.add_column('workflow_executions', sa.Column('ai_tokens_used', sa.Integer(), nullable=False))
    op.add_column('workflow_executions', sa.Column('ai_cost_estimate', sa.String(length=50), nullable=True))
    op.alter_column('workflow_executions', 'status',
               existing_type=postgresql.ENUM('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', name='executionstatus'),
               type_=sa.String(length=50),
               nullable=False)
    op.alter_column('workflow_executions', 'input_data',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               nullable=False)
    op.alter_column('workflow_executions', 'output_data',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('workflow_executions', 'started_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('workflow_executions', 'completed_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('workflow_executions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False)
    op.create_index(op.f('ix_workflow_executions_status'), 'workflow_executions', ['status'], unique=False)
    op.create_foreign_key(None, 'workflow_executions', 'workflows', ['workflow_id'], ['id'])
    op.drop_column('workflow_executions', 'error_message')
    op.add_column('workflows', sa.Column('version', sa.Integer(), nullable=False))
    op.add_column('workflows', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('workflows', sa.Column('created_by', sa.UUID(), nullable=True))
    op.add_column('workflows', sa.Column('ai_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.alter_column('workflows', 'definition',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('workflows', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               nullable=False)
    op.alter_column('workflows', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.create_index(op.f('ix_workflows_name'), 'workflows', ['name'], unique=False)
    op.create_foreign_key(None, 'workflows', 'users', ['created_by'], ['id'])
    op.drop_column('workflows', 'status')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('workflows', sa.Column('status', postgresql.ENUM('DRAFT', 'ACTIVE', 'INACTIVE', name='workflowstatus'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'workflows', type_='foreignkey')
    op.drop_index(op.f('ix_workflows_name'), table_name='workflows')
    op.alter_column('workflows', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('workflows', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('workflows', 'definition',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=False)
    op.drop_column('workflows', 'ai_config')
    op.drop_column('workflows', 'created_by')
    op.drop_column('workflows', 'is_active')
    op.drop_column('workflows', 'version')
    op.add_column('workflow_executions', sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'workflow_executions', type_='foreignkey')
    op.drop_index(op.f('ix_workflow_executions_status'), table_name='workflow_executions')
    op.alter_column('workflow_executions', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('workflow_executions', 'completed_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('workflow_executions', 'started_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('workflow_executions', 'output_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('workflow_executions', 'input_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               nullable=True)
    op.alter_column('workflow_executions', 'status',
               existing_type=sa.String(length=50),
               type_=postgresql.ENUM('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', name='executionstatus'),
               nullable=True)
    op.drop_column('workflow_executions', 'ai_cost_estimate')
    op.drop_column('workflow_executions', 'ai_tokens_used')
    op.drop_column('workflow_executions', 'total_steps')
    op.drop_column('workflow_executions', 'steps_completed')
    op.drop_column('workflow_executions', 'current_step')
    op.drop_column('workflow_executions', 'error_data')
    op.drop_index(op.f('ix_execution_checkpoints_checkpoint_id'), table_name='execution_checkpoints')
    op.drop_table('execution_checkpoints')
    op.drop_table('users')
    op.drop_index(op.f('ix_ai_tools_name'), table_name='ai_tools')
    op.drop_table('ai_tools')
    # ### end Alembic commands ###
